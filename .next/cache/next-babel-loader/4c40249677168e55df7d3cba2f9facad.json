{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as actionTypes from '../actions/MovieSearchActions/actionTypes';\nimport { updateObject } from '../../utils/reduxUtility';\nimport { SEARCH_BY, TITLE, GENRE, RELEASED_DATE, RAITING } from '../../constants';\nvar initialState = {\n  movies: [],\n  shearchParam: 'title',\n  searchInput: '',\n  sortParam: RELEASED_DATE\n};\n\nvar search = function search(state, action) {\n  return _objectSpread({}, state, {\n    movies: action.payload.movies,\n    searchInput: action.payload.input\n  });\n};\n/*const sort = (state, action) => {\r\n  return { ...state, movies: action.payload.movies, sortParam: action.payload.param };\r\n}*/\n\n\nvar sort = function sort(state, action) {\n  var sortedMovies = _toConsumableArray(state.movies).sort(function (a, b) {\n    if (action.payload === RELEASED_DATE) {\n      return new Date(b.release_date) - new Date(a.release_date);\n    } else {\n      return b.vote_average - a.vote_average;\n    }\n  });\n\n  return _objectSpread({}, state, {\n    movies: sortedMovies,\n    sortParam: action.payload\n  });\n};\n\nvar setSearchParam = function setSearchParam(state, action) {\n  return _objectSpread({}, state, {\n    shearchParam: action.payload\n  });\n};\n\nvar setMovies = function setMovies(state, action) {\n  return _objectSpread({}, state, {\n    movies: action.payload\n  });\n};\n\nvar getMovie = function getMovie(state, action) {\n  return _objectSpread({}, state, {\n    movies: action.payload\n  });\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.SET_SEARCH_PARAM:\n      return setSearchParam(state, action);\n\n    case actionTypes.SET_MOVIES:\n      return setMovies(state, action);\n\n    case actionTypes.SORT:\n      return sort(state, action);\n\n    case actionTypes.SEARCH:\n      return search(state, action);\n\n    case actionTypes.GET_MOVIE:\n      return getMovie(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Learn/ReactJS Mentoring Program/ReactJS-gmp/src/store/reducers/movieSearchReducer.js"],"names":["actionTypes","updateObject","SEARCH_BY","TITLE","GENRE","RELEASED_DATE","RAITING","initialState","movies","shearchParam","searchInput","sortParam","search","state","action","payload","input","sort","sortedMovies","a","b","Date","release_date","vote_average","setSearchParam","setMovies","getMovie","reducer","type","SET_SEARCH_PARAM","SET_MOVIES","SORT","SEARCH","GET_MOVIE"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAKA,WAAZ,MAA6B,2CAA7B;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,KAA3B,EAAkCC,aAAlC,EAAiDC,OAAjD,QAAgE,iBAAhE;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,YAAY,EAAE,OAFK;AAGnBC,EAAAA,WAAW,EAAE,EAHM;AAInBC,EAAAA,SAAS,EAAEN;AAJQ,CAArB;;AAOA,IAAMO,MAAM,GAAG,SAATA,MAAS,CAACC,KAAD,EAAQC,MAAR,EAAmB;AAChC,2BAAYD,KAAZ;AAAmBL,IAAAA,MAAM,EAAEM,MAAM,CAACC,OAAP,CAAeP,MAA1C;AAAkDE,IAAAA,WAAW,EAAEI,MAAM,CAACC,OAAP,CAAeC;AAA9E;AACD,CAFD;AAIA;;;;;AAIA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACJ,KAAD,EAAQC,MAAR,EAAmB;AAC9B,MAAMI,YAAY,GAAG,mBAAIL,KAAK,CAACL,MAAV,EAAkBS,IAAlB,CAAuB,UAAUE,CAAV,EAAaC,CAAb,EAAgB;AAC1D,QAAIN,MAAM,CAACC,OAAP,KAAmBV,aAAvB,EAAsC;AACpC,aAAO,IAAIgB,IAAJ,CAASD,CAAC,CAACE,YAAX,IAA2B,IAAID,IAAJ,CAASF,CAAC,CAACG,YAAX,CAAlC;AACD,KAFD,MAEO;AACL,aAAOF,CAAC,CAACG,YAAF,GAAiBJ,CAAC,CAACI,YAA1B;AACD;AACF,GANoB,CAArB;;AAOA,2BAAYV,KAAZ;AAAmBL,IAAAA,MAAM,EAAEU,YAA3B;AAAyCP,IAAAA,SAAS,EAAEG,MAAM,CAACC;AAA3D;AACD,CATD;;AAWA,IAAMS,cAAc,GAAG,SAAjBA,cAAiB,CAACX,KAAD,EAAQC,MAAR,EAAmB;AACxC,2BAAYD,KAAZ;AAAmBJ,IAAAA,YAAY,EAAEK,MAAM,CAACC;AAAxC;AACD,CAFD;;AAIA,IAAMU,SAAS,GAAG,SAAZA,SAAY,CAACZ,KAAD,EAAQC,MAAR,EAAmB;AACnC,2BAAYD,KAAZ;AAAmBL,IAAAA,MAAM,EAAEM,MAAM,CAACC;AAAlC;AACD,CAFD;;AAIA,IAAMW,QAAQ,GAAG,SAAXA,QAAW,CAACb,KAAD,EAAQC,MAAR,EAAmB;AAClC,2BAAYD,KAAZ;AAAmBL,IAAAA,MAAM,EAAEM,MAAM,CAACC;AAAlC;AACD,CAFD;;AAIA,IAAMY,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCd,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AAChD,UAAQA,MAAM,CAACc,IAAf;AACE,SAAK5B,WAAW,CAAC6B,gBAAjB;AACE,aAAOL,cAAc,CAACX,KAAD,EAAQC,MAAR,CAArB;;AACF,SAAKd,WAAW,CAAC8B,UAAjB;AACE,aAAOL,SAAS,CAACZ,KAAD,EAAQC,MAAR,CAAhB;;AACF,SAAKd,WAAW,CAAC+B,IAAjB;AACE,aAAOd,IAAI,CAACJ,KAAD,EAAQC,MAAR,CAAX;;AACF,SAAKd,WAAW,CAACgC,MAAjB;AACE,aAAOpB,MAAM,CAACC,KAAD,EAAQC,MAAR,CAAb;;AACF,SAAKd,WAAW,CAACiC,SAAjB;AACE,aAAOP,QAAQ,CAACb,KAAD,EAAQC,MAAR,CAAf;;AACF;AACE,aAAOD,KAAP;AAZJ;AAcD,CAfD;;AAiBA,eAAec,OAAf","sourcesContent":["import * as actionTypes from '../actions/MovieSearchActions/actionTypes';\r\nimport { updateObject } from '../../utils/reduxUtility';\r\nimport { SEARCH_BY, TITLE, GENRE, RELEASED_DATE, RAITING } from '../../constants';\r\n\r\nconst initialState = {\r\n  movies: [],\r\n  shearchParam: 'title',\r\n  searchInput: '',\r\n  sortParam: RELEASED_DATE\r\n};\r\n\r\nconst search = (state, action) => {\r\n  return { ...state, movies: action.payload.movies, searchInput: action.payload.input };\r\n}\r\n\r\n/*const sort = (state, action) => {\r\n  return { ...state, movies: action.payload.movies, sortParam: action.payload.param };\r\n}*/\r\n\r\nconst sort = (state, action) => {\r\n  const sortedMovies = [...state.movies].sort(function (a, b) {\r\n    if (action.payload === RELEASED_DATE) {\r\n      return new Date(b.release_date) - new Date(a.release_date);\r\n    } else {\r\n      return b.vote_average - a.vote_average;\r\n    }\r\n  });\r\n  return { ...state, movies: sortedMovies, sortParam: action.payload };\r\n}\r\n\r\nconst setSearchParam = (state, action) => {\r\n  return { ...state, shearchParam: action.payload };\r\n}\r\n\r\nconst setMovies = (state, action) => {\r\n  return { ...state, movies: action.payload };\r\n}\r\n\r\nconst getMovie = (state, action) => {\r\n  return { ...state, movies: action.payload };\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.SET_SEARCH_PARAM:\r\n      return setSearchParam(state, action);\r\n    case actionTypes.SET_MOVIES:\r\n      return setMovies(state, action);\r\n    case actionTypes.SORT:\r\n      return sort(state, action);\r\n    case actionTypes.SEARCH:\r\n      return search(state, action);\r\n    case actionTypes.GET_MOVIE:\r\n      return getMovie(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}